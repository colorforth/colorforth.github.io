<h1 align="center">The Map is Not the Territory</h1>

This observation by Alfred Korzybski applies in several ways to GreenArrays' multi-computer chip. It says that a map cannot be complete. That a model cannot capture everything. That reality exceeds our ability to understand.

<h2><img src="GA144.jpg">GA144</h2>
GA144 is a computer chip. This is what it looks like. But this is not the chip.

<p>It provides 144 computers in a 1-cm package; as an 18 wide by 8 high array. They are surrounded by 104 pads bonded to 89 package pins. Computers at the edge of the array use these pads to sense and control the larger world. Other computers help them process input and generate output.

<p>Each computer is very small with only 64 words of read-write memory. But very fast, executing 666 million instructions per second. And there are 144 of them.

<p>One computer can communicate with a PC using the RS232 serial protocol. Three computers can generate RGB output to a color monitor. A bunch of computers can talk Ethernet. Computers can talk to counterparts on other chips.

<p>These computers are programmed from a PC with an interactive development environment: the compiler generates machine instructions and the simulator shows a picture of the chip as it executes them.

<p>But this description is not the chip.

<h2>Documentation</h2>
GreenArrays has extensive documentation about this chip. It is difficult to provide the right level of detail. We have to describe:<ul>
<li>Instruction set of the C18 computer
<li>Speed of instructions
<li>Communication between computers
<li>Downloading code
<li>Pin-out
<li>Control of I/O
<li>Effect of temperature
<li>Effect of voltage
<li>and more
</ul>We can but try.

<p>The point here is that the documentation is not the chip. The chip works and words describe how. But they do so inadequately. There are 2.5 million transistors switching current at 10 GHz. You  must understand the aspects of this behavior that are important to you.

<h2>Simulator</h2>
Even without having a chip, you can program it and run an accurate simulation of how it will perform. A display shows all 144 computers and details about a few of them. It is an amazing bit of software, fast enough to run a significant amount of code. You can actually watch activity propagate across the chip. And identify bottlenecks. It's remarkable how well the chip verifys the simulator.  

<p>But the simulator is not the chip. It does not capture all the details and runs 1000x slow - too slow for video code. The simulator sequences through the computers; the chip runs them simultaneously. The experience of using the simulator is very different from using the chip. It does not capture the awe factor.

<h2>Application Notes</h2>
This aspect of documentation describes how to program various applications. Hopefully ones that a user will need. But such Notes are not the chip.

<p>In particular, a Note might describe the computers mentioned above. Ones that generate video, or run off-chip memory. But the chip does not do one thing. It does many, assigning groups of computers to tasks that are done simultaneously. No single task captures the breadth of the chip.

<h2><img src="GA144.jpg">Itself</h2>
All right! You have an actual GA144 in your hand - with anti-static protection. But that is not the chip.

<p>GreenArrays has thousands of chips, with more coming. Also not.

<p>The chip is disruptive technology; a paradigm changer. This larger view of its future is contained in the present. As people appreciate the ability to apply unlimited computational power to sophisticated tasks its successors will become ubiquitous.

<p>The chip is not the chip.

<h2>The Map is Not the Territory</h2>
Programming this chip is an incremental activity. First you talk to it. Then you describe a simple task. Then you make it more complex. Then a second task... This takes time and leads to understanding. Whereupon you revisit the first task...

<p>Words fail to describe this process. The user must build a mental image of the chip and its actions. As with any complex activity. It is challenging; it is fun. Programming an unlimited number of computers in modules of 144.

<p>Thinking and dreaming are an essential part of human existence. But they are not enough. Actually doing something - steering electons about their myriad paths - is reality. Nothing substitutes for it.

<p>And you can't program the 1000<sup>th</sup> computer until you've programmed the 1<sup>st</sup>.